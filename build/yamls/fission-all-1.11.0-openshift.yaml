---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: fission-function
  labels:
    name: fission-function
    chart: "fission-all-1.11.0"
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: fission-builder
  labels:
    name: fission-builder
    chart: "fission-all-1.11.0"
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-svc
  namespace: fission
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-fetcher
  namespace: fission-function
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-builder
  namespace: fission-builder
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-nats-streaming
  namespace: fission
---
# Source: fission-all/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: influxdb
  labels:
    chart: "fission-all-1.11.0"
type: Opaque
data:
  username: "YWRtaW4="
  password: "QlJiQjJwd2hZZkVNNUVDVE9Ra2c="
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-config
  namespace: fission
data:
  "config.yaml": Y2FuYXJ5OgogIGVuYWJsZWQ6IHRydWUKICBwcm9tZXRoZXVzU3ZjOiAiIgo=
---
# Source: fission-all/templates/fluentbit.yaml
# Fluentbit deployment for Fission
#
# Requires:
# - service account: fission-svc
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-fission-fluentbit
data:
  fluentbit.conf: |
   # Some stuff in this file is copied out of https://github.com/fluent/fluent-bit-kubernetes-logging/blob/master/output/kafka/fluent-bit-configmap.yaml
   [SERVICE]
       Flush 5
       Log_Level info
       Parsers_File parsers.conf
   
   [INPUT]
       Name tail
       Tag log.*
       Path ${LOG_PATH}
       Mem_Buf_Limit 5MB
       Parser docker
       DB /var/log/fission/flb_kube.db
       Skip_Long_Lines   On
       Refresh_Interval  10
   
   [FILTER]
       Name kubernetes
       Match *
       Kube_Tag_Prefix  log.var.log.fission.
       Kube_URL https://kubernetes.default.svc.cluster.local:443
   
   #
   # Flatten kubernetes labels so we can tag and query functionuid with influxdb
   #
   [FILTER]
       Name nest
       Match log.*
       Operation lift
       Nested_under kubernetes
       Prefix_with kubernetes_
   
   [FILTER]
       Name nest
       Match log.*
       Operation lift
       Nested_under kubernetes_labels
       Prefix_with kubernetes_labels_
   
   [OUTPUT]
       Name influxdb
       Match log.*
       Host ${INFLUXDB_ADDRESS}
       Port ${INFLUXDB_PORT}
       Database ${INFLUXDB_DBNAME}
       HTTP_User ${INFLUXDB_USERNAME}
       HTTP_Passwd ${INFLUXDB_PASSWD}
       Tag_Keys kubernetes_labels_functionUid
       Sequence_Tag  _seq
   
   
   # Useful for testing config changes
   #[OUTPUT]
   #    Name file
   #    Match log.*
   #    Path /flbout.txt
   

  parsers.conf: |
   [PARSER]
       Name        docker
       Format      json
       Time_Key    time
       Time_Format %Y-%m-%dT%H:%M:%S.%L
       Time_Keep   On
   
       # next bit is useful when the logs from the function itself are in json
       # Command      |  Decoder | Field | Optional Action
       # =============|==================|=================
       #Decode_Field_As   escaped    log
---
# Source: fission-all/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: fission-storage-pvc
  labels:
    app: fission-storage
    chart: "fission-all-1.11.0"
    release: "RELEASE-NAME"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: fission-all/templates/deployment.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-configmap-getter
rules:
- apiGroups:
  - '*'
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - watch
  - list
---
# Source: fission-all/templates/deployment.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: package-getter
rules:
- apiGroups:
  - '*'
  resources:
  - packages
  verbs:
  - get
  - watch
  - list
---
# Source: fission-all/templates/deployment.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fission-crd
subjects:
- kind: ServiceAccount
  name: fission-svc
  namespace: fission
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: fission-all/templates/deployment.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fission-admin
  namespace: fission
subjects:
  - kind: ServiceAccount
    name: fission-svc
    namespace: fission
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: fission-all/templates/deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  labels:
    svc: influxdb
    chart: "fission-all-1.11.0"
spec:
  type: ClusterIP
  ports:
  - port: 8086
    targetPort: 8086
  selector:
    svc: influxdb
---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: router
  labels:
    svc: router
    application: fission-router
    chart: "fission-all-1.11.0"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8888
  selector:
    svc: router
---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: controller
  labels:
    svc: controller
    application: fission-api
    chart: "fission-all-1.11.0"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8888
  selector:
    svc: controller
---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nats-streaming
  labels:
    svc: nats-streaming
    chart: "fission-all-1.11.0"
spec:
  type: ClusterIP
  ports:
  - port: 4222
    targetPort: 4222
  selector:
    svc: nats-streaming
---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: storagesvc
  labels:
    svc: storagesvc
    application: fission-storage
    chart: "fission-all-1.11.0"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
  selector:
    svc: storagesvc
---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: executor
  labels:
    svc: executor
    chart: "fission-all-1.11.0"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8888
  selector:
    svc: executor
---
# Source: fission-all/templates/fluentbit.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: logger
  labels:
    chart: "fission-all-1.11.0"
    svc: logger
spec:
  selector:
    matchLabels:
      svc: logger
  template:
    metadata:
      labels:
        svc: logger
    spec:
      initContainers:
        - name: init
          image: "busybox"
          imagePullPolicy: IfNotPresent
          command: ['mkdir', '-p', '/var/log/fission']
          volumeMounts:
            - name: container-log
              mountPath: /var/log/
              readOnly: false
          securityContext:
            privileged: true
      containers:
        - name: logger
          image: "index.docker.io/fission/fission-bundle:1.11.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          command: ["/fission-bundle"]
          args: ["--logger"]
          volumeMounts:
            - name: container-log
              mountPath: /var/log/
              readOnly: false
            - name: docker-log
              mountPath: /var/lib/docker/containers
              readOnly: true
          securityContext:
            privileged: true
        - name: fluentbit
          image: "index.docker.io/fluent/fluent-bit:1.5.1"

          imagePullPolicy: IfNotPresent
          # CMD ["/fluent-bit/bin/fluent-bit", "-c", "/fluent-bit/etc/fluent-bit.conf"]
          command: ["/fluent-bit/bin/fluent-bit", "-c", "/fluent-bit/etc/fluentbit.conf"]
          env:
            - name: INFLUXDB_ADDRESS
              value: influxdb
            - name: INFLUXDB_PORT
              value: "8086"
            - name: INFLUXDB_DBNAME
              value: "fissionFunctionLog"
            - name: INFLUXDB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: influxdb
                  key: username
            - name: INFLUXDB_PASSWD
              valueFrom:
                secretKeyRef:
                  name: influxdb
                  key: password
            - name: LOG_PATH
              value: /var/log/fission/*.log
          securityContext:
            privileged: true
          volumeMounts:
            - name: container-log
              mountPath: /var/log/
              readOnly: false
            - name: docker-log
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: fluentbit-config
              mountPath: /fluent-bit/etc/
              readOnly: true
      serviceAccountName: fission-svc
      volumes:
        - name: container-log
          hostPath:
            path: /var/log/
        - name: docker-log
          hostPath:
            path: /var/lib/docker/containers
        # Fluentbit config location: /fluent-bit/etc/*.conf
        - name: fluentbit-config
          configMap:
            name: RELEASE-NAME-fission-fluentbit
  updateStrategy:
    type: RollingUpdate
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  labels:
    chart: "fission-all-1.11.0"
    svc: controller
    application: fission-api
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: controller
      application: fission-api
  template:
    metadata:
      labels:
        svc: controller
        application: fission-api
    spec:
      containers:
      - name: controller
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--controllerPort", "8888"]
        env:
        - name: FISSION_FUNCTION_NAMESPACE
          value: "fission-function"
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: DEBUG_ENV
          value: "false"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config/config.yaml
          subPath: config.yaml
        ports:
          - containerPort: 8888
            name: http
      serviceAccountName: fission-svc
      volumes:
      - name: config-volume
        configMap:
          name: feature-config
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor
  labels:
    chart: "fission-all-1.11.0"
    svc: executor
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: executor
  template:
    metadata:
      labels:
        svc: executor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: executor
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--executorPort", "8888", "--namespace", "fission-function"]
        env:
        - name: FETCHER_IMAGE
          value: "fission/fetcher:1.11.0"
        - name: FETCHER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: RUNTIME_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: ADOPT_EXISTING_RESOURCES
          value: "false"
        - name: ENABLE_ISTIO
          value: "false"
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: FETCHER_MINCPU
          value: "10m"
        - name: FETCHER_MINMEM
          value: "16Mi"
        - name: FETCHER_MAXCPU
          value: ""
        - name: FETCHER_MAXMEM
          value: ""
        - name: DEBUG_ENV
          value: "false"
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8888
          name: http
      serviceAccountName: fission-svc
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buildermgr
  labels:
    chart: "fission-all-1.11.0"
    svc: buildermgr
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: buildermgr
  template:
    metadata:
      labels:
        svc: buildermgr
    spec:
      containers:
      - name: buildermgr
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--builderMgr", "--storageSvcUrl", "http://storagesvc.fission", "--envbuilder-namespace", "fission-builder"]
        env:
        - name: FETCHER_IMAGE
          value: "fission/fetcher:1.11.0"
        - name: FETCHER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: BUILDER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: ENABLE_ISTIO
          value: "false"
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: FETCHER_MINCPU
          value: "10m"
        - name: FETCHER_MINMEM
          value: "16Mi"
        - name: FETCHER_MAXCPU
          value: ""
        - name: FETCHER_MAXMEM
          value: ""
        - name: DEBUG_ENV
          value: "false"
      serviceAccountName: fission-svc
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubewatcher
  labels:
    chart: "fission-all-1.11.0"
    svc: kubewatcher
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: kubewatcher
  template:
    metadata:
      labels:
        svc: kubewatcher
    spec:
      containers:
      - name: kubewatcher
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--kubewatcher", "--routerUrl", "http://router.fission"]
        env:
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: DEBUG_ENV
          value: "false"
      serviceAccountName: fission-svc
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  labels:
    chart: "fission-all-1.11.0"
    svc: influxdb
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: influxdb
  template:
    metadata:
      labels:
        svc: influxdb
    spec:
      containers:
      - name: influxdb
        image: "influxdb:1.7"
        imagePullPolicy: IfNotPresent
        env:
        - name: INFLUXDB_DB
          value: fissionFunctionLog
        - name: INFLUXDB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: influxdb
              key: username
        - name: INFLUXDB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: influxdb
              key: password
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timer
  labels:
    chart: "fission-all-1.11.0"
    svc: timer
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: timer
  template:
    metadata:
      labels:
        svc: timer
    spec:
      containers:
      - name: timer
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--timer", "--routerUrl", "http://router.fission"]
        env:
        - name: DEBUG_ENV
          value: "false"
      serviceAccountName: fission-svc

#
# This is commented out until fission-ui allows configuring the
# namespace. Right now it just crashes if Release.Namespace !=
# "fission".
#
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: fission-ui
#  labels:
#    chart: "fission-all-1.11.0"
#spec:
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        svc: fission-ui
#    spec:
#      containers:
#      - name: nginx
#        image: index.docker.io/
#        imagePullPolicy: IfNotPresent
#      - name: kubectl-proxy
#        image: index.docker.io/lachlanevenson/k8s-kubectl
#        args: ["proxy", "--port", "8001", "--address", "127.0.0.1"]
#      serviceAccountName: fission-svc
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    svc: nats-streaming
  name: nats-streaming
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: nats-streaming
  template:
    metadata:
      labels:
        svc: nats-streaming
    spec:
      serviceAccount: fission-nats-streaming
      containers:
      - name: nats-streaming
        image: "nats-streaming"
        imagePullPolicy: IfNotPresent
        args: [
          "--cluster_id", "fissionMQTrigger",
          "--auth", "defaultFissionAuthToken",
          "--max_channels", "0",
          "--http_port", "4223"
        ]
        ports:
        - containerPort: 4222
          protocol: TCP
        - containerPort: 4223
          protocol: TCP
        readinessProbe:
          httpGet:
            path: "/streaming/serverz"
            port: 4223
          initialDelaySeconds: 30
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/streaming/serverz"
            port: 4223
          initialDelaySeconds: 30
          periodSeconds: 5
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtrigger-nats-streaming
  labels:
    chart: "fission-all-1.11.0"
    svc: mqtrigger
    messagequeue: nats-streaming
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: mqtrigger
      messagequeue: nats-streaming
  template:
    metadata:
      labels:
        svc: mqtrigger
        messagequeue: nats-streaming
    spec:
      containers:
      - name: mqtrigger
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--mqt", "--routerUrl", "http://router.fission"]
        env:
        - name: MESSAGE_QUEUE_TYPE
          value: nats-streaming
        - name: MESSAGE_QUEUE_CLUSTER_ID
          value: fissionMQTrigger
        - name: MESSAGE_QUEUE_QUEUE_GROUP
          value: fission-messageQueueNatsTrigger
        - name: MESSAGE_QUEUE_CLIENT_ID
          value: fission
        - name: MESSAGE_QUEUE_URL
          value: nats://defaultFissionAuthToken@nats-streaming:4222
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: DEBUG_ENV
          value: "false"
      serviceAccountName: fission-svc
---
# Source: fission-all/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storagesvc
  labels:
    chart: "fission-all-1.11.0"
    svc: storagesvc
    application: fission-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: storagesvc
      application: fission-storage
  template:
    metadata:
      labels:
        svc: storagesvc
        application: fission-storage
    spec:
      containers:
      - name: storagesvc
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--storageServicePort", "8000", "--storageType", "local"]
        env:
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: PRUNE_INTERVAL
          value: "60"
        - name: DEBUG_ENV
          value: "false"
        volumeMounts:
        - name: fission-storage
          mountPath: /fission
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8000
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8000
          initialDelaySeconds: 35
          periodSeconds: 5
        ports:
          - containerPort: 8000
            name: http
      serviceAccountName: fission-svc
      volumes:
      - name: fission-storage
        persistentVolumeClaim:
          claimName: fission-storage-pvc
---
# Source: fission-all/templates/router.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: router
  labels:
    chart: "fission-all-1.11.0"
    svc: router
    application: fission-router
spec:
  replicas: 1
  selector:
    matchLabels:
      application: fission-router
      svc: router
  template:
    metadata:
      labels:
        application: fission-router
        svc: router
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: router
        image: "index.docker.io/fission/fission-bundle:1.11.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--routerPort", "8888", "--executorUrl", "http://executor.fission"]
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ROUTER_ROUND_TRIP_TIMEOUT
            value: "50ms"
          - name: ROUTER_ROUNDTRIP_TIMEOUT_EXPONENT
            value: "2"
          - name: ROUTER_ROUND_TRIP_KEEP_ALIVE_TIME
            value: "30s"
          - name: ROUTER_ROUND_TRIP_DISABLE_KEEP_ALIVE
            value: "true"
          - name: ROUTER_ROUND_TRIP_MAX_RETRIES
            value: "10"
          - name: ROUTER_SVC_ADDRESS_MAX_RETRIES
            value: "5"
          - name: ROUTER_SVC_ADDRESS_UPDATE_TIMEOUT
            value: "30s"
          - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
            value: ""
          - name: TRACING_SAMPLING_RATE
            value: "0.5"
          - name: USE_ENCODED_PATH
            value: "false"
          - name: DEBUG_ENV
            value: "false"
          - name: DISPLAY_ACCESS_LOG
            value: "false"
          - name: ANALYTICS_URL
            value: "https://g.fission.io/metrics"
        readinessProbe:
          httpGet:
            path: "/router-healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/router-healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8888
          name: http
      serviceAccountName: fission-svc
---
# Source: fission-all/templates/nonhelm-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: RELEASE-NAME-fission-all-1.11.0-714
  labels:
    # The "release" convention makes it easy to tie a release to all of the
    # Kubernetes resources that were created as part of that release.
    release: RELEASE-NAME
    # This makes it easy to audit chart usage.
    chart: fission-all-1.11.0
    app: fission-all
spec:
  #ttlSecondsAfterFinished: 120
  template:
    metadata:
      name: RELEASE-NAME-fission-all
      labels:
        release: RELEASE-NAME
        app: fission-all
      annotations:
    spec:
      restartPolicy: Never
      containers:
        - name: post-install-job
          image: "fission/alpinecurl"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "/usr/bin/curl -m 5 -H \"Content-Type: application/json\" -X POST -d '{\"type\": \"yaml-post-install\", \"chartName\": \"fission-all\", \"chartVersion\": \"1.11.0\"}' https://g.fission.io/analytics || true"]
---
# Source: fission-all/templates/pre-upgrade-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: RELEASE-NAME-fission-all-1.11.0-358
  labels:
    # The "release" convention makes it easy to tie a release to all of the
    # Kubernetes resources that were created as part of that release.
    release: "RELEASE-NAME"
    # This makes it easy to audit chart usage.
    chart: fission-all-1.11.0
    app: fission-all
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      name: RELEASE-NAME-fission-all
      labels:
        release: "RELEASE-NAME"
        app: fission-all
    spec:
      restartPolicy: Never
      containers:
      - name: pre-upgrade-job
        image: fission/pre-upgrade-checks:1.11.0
        imagePullPolicy: IfNotPresent
        command: [ "/pre-upgrade-checks" ]
        args: ["--fn-pod-namespace", "fission-function", "--envbuilder-namespace", "fission-builder"]
      serviceAccountName: fission-svc
